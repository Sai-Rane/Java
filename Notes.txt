Features of JAVA:
Java is an interpreted language
Multi-threaded - A thread is like a separate program, executing concurrently. We can write Java programs that deal with many tasks at once by defining multiple threads. The main advantage of multi-threading is that it doesn't occupy memory for each thread. It shares a common memory area.

Java code is compiled by the compiler and converted into bytecode. This bytecode is a platform-independent code because it can be run on multiple platforms, i.e., Write Once and Run Anywhere (WORA).

Architecture-neutral
In C programming, int data type occupies 2 bytes of memory for 32-bit architecture and 4 bytes of memory for 64-bit architecture. However, it occupies 4 bytes of memory for both 32 and 64-bit architectures in Java.

Classloader: It is the subsystem of JVM that is used to load class files.

Java uses Unicode system not ASCII code system.

---------------------------------------------------------------------------------------------------------------

- class keyword is used to declare a class in Java.
- public keyword is an access modifier that represents visibility. It means it is visible to all.
- static is a keyword. If we declare any method as static, it is known as the static method. The core advantage of the static method is that there is no need to create an object to invoke the static method. The main() method is executed by the JVM, so it doesn't require creating an object to invoke the main() method. So, it saves memory.
- void is the return type of the method. It means it doesn't return any value.
- main represents the starting point of the program.

---------------------------------------------------------------------------------------------------------------

Let's see the different codes to write the main method.

public static void main(String[] args)  
public static void main(String []args)  
public static void main(String args[])  
https://www.javatpoint.com/internal-details-of-hello-java-program

---------------------------------------------------------------------------------------------------------------

JVM  provides a runtime environment in which Java bytecode can be executed. It can also run those programs which are written in other languages and compiled to Java bytecode.JVM, JRE, and JDK are platform dependent because the configuration of each OS is different from each other. However, Java is platform independent. 

---------------------------------------------------------------------------------------------------------------

Heap is the runtime data area in which objects are allocated.

Stack - Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return.
Each thread has a private JVM stack, created at the same time as thread.
A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.

---------------------------------------------------------------------------------------------------------------

Java Variables
A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.
Variable is a name of memory location. There are three types of variables in java: local, instance and static.
There are two types of data types in Java: primitive and non-primitive.

Local Variable is declared inside the body of the method. You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists.
A local variable cannot be defined with "static" keyword.

Instance Variable is declared inside the class but outside the body of the method, is called an instance variable. It is not declared as static.  Instance variable gets memory each time when we create an object of the class.

Static variable
A variable that is declared as static is called a static variable. It cannot be local. You can create a single copy of the static variable and share it among all the instances of the class. Memory allocation for static variables happens only once when the class is loaded in the memory.

Example:
public class A  
{  
    static int m=100; //static variable  
    void method()  
    {    
        int n=90; //local variable    
    }  
    public static void main(String args[])  
    {  
        int data=50; //instance variable    
    }  
}

---------------------------------------------------------------------------------------------------------------

Java Variable Example: Widening

public class Simple{  
public static void main(String[] args){  
int a=10;  
float f=a;  
System.out.println(a);  
System.out.println(f);  
}}  

Output:
10
10.0
---------------------------------------------------------------------------------------------------------------

Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:

Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double.
Non-primitive data types: The non-primitive data types include Classes, Interfaces,String and Arrays.

---------------------------------------------------------------------------------------------------------------

Object - Object can be defined as an instance of a class.
Example: A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc.

Class - Class
Collection of objects is called class. It is a logical entity.
A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.

Inheritance
When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.

Polymorphism
If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.
In Java, we use method overloading and method overriding to achieve polymorphism.
Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.

Abstraction
Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.
In Java, we use abstract class and interface to achieve abstraction.

Encapsulation
Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.
A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.

---------------------------------------------------------------------------------------------------------------
Constructor
It is called when an instance of the class is created. In Java, a constructor is just like a method but without return type. It can also be overloaded like Java methods.
There are two types of constructors in Java: no-arg constructor, and parameterized constructor.
There are two rules defined for the constructor.

Rules for defining Constructor:
Constructor name must be the same as its class name
A Constructor must have no explicit return type
A Java constructor cannot be abstract, static, final, and synchronized

The default constructor is used to provide the default values to the object like 0, null, etc., depending on the type.

//Java Program to create and call a default constructor  
class Bike1{  
//creating a default constructor  
Bike1(){System.out.println("Bike is created");
}  
//main method  
public static void main(String args[]){  
//calling a default constructor  
Bike1 b=new Bike1();  
}  
}  

---------------------------------------------------------------------------------------------------------------
https://www.javatpoint.com/static-keyword-in-java
Static Variable
The static variable gets memory only once in the class area at the time of class loading.

Java static method
If you apply static keyword with any method, it is known as static method.
A static method belongs to the class rather than the object of a class.
A static method can be invoked without the need for creating an instance of a class.
A static method can access static data member and can change the value of it.

There are two main restrictions for the static method
1. The static method can not use non static data member or call non-static method directly.
2. this and super cannot be used in static context.

---------------------------------------------------------------------------------------------------------------

this keyword is used to distinguish local variable and instance variable.
this keyword is used to access current class member variable and current class functions
this() can be used to invoke the current class constructor. It is used to reuse the constructor. In other words, it is used for constructor chaining.

class A{  
A(){
    System.out.println("hello a");
    }  
A(int x){  
this();
System.out.println(x);  
}  
}  
class TestThis5{  
public static void main(String args[]){  
A a=new A(10);  
}} 

Rule: Call to this() must be the first statement in constructor
this refers to current Object. Current objevt means object which is calling the method